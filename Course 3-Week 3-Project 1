
# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
# get_movies_from_tastedive("Bridesmaids")
# get_movies_from_tastedive("Black Panther")

import requests_with_caching
import json


def get_movies_from_tastedive(title):
    endpoint = 'https://tastedive.com/api/similar'
    param = {}
    param['q'] = title
    param['limit'] = 5
    param['type'] = 'movies'

    cache = requests_with_caching.get(endpoint, params=param)
    return json.loads(cache.text)

get_movies_from_tastedive("Bridesmaids")
get_movies_from_tastedive("Black Panther")



# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
# extract_movie_titles(get_movies_from_tastedive("Tony Bennett"))
# extract_movie_titles(get_movies_from_tastedive("Black Panther"))
import requests_with_caching
import json

def get_movies_from_tastedive(title):
    endpoint = 'https://tastedive.com/api/similar'
    param = {}
    param['q'] = title
    param['limit'] = 5
    param['type'] = 'movies'

    cache = requests_with_caching.get(endpoint, params=param)
    return json.loads(cache.text)

get_movies_from_tastedive("Bridesmaids")
get_movies_from_tastedive("Black Panther")


def extract_movie_titles(dict):
    list=[]
    for elem in dict["Similar"]["Results"]:
        list.append(elem["Name"])
    return list

extract_movie_titles(get_movies_from_tastedive("Tony Bennett"))
extract_movie_titles(get_movies_from_tastedive("Black Panther"))



# some invocations that we use in the automated tests; uncomment these if you are getting errors and want better error messages
# get_related_titles(["Black Panther", "Captain Marvel"])
# get_related_titles([])

import requests_with_caching
import json

def get_movies_from_tastedive(title):
    endpoint = 'https://tastedive.com/api/similar'
    param = {}
    param['q'] = title
    param['limit'] = 5
    param['type'] = 'movies'

    cache = requests_with_caching.get(endpoint, params=param)
    return json.loads(cache.text)

get_movies_from_tastedive("Bridesmaids")
get_movies_from_tastedive("Black Panther")


def extract_movie_titles(dict):
    list=[]
    for elem in dict["Similar"]["Results"]:
        list.append(elem["Name"])
    return list

extract_movie_titles(get_movies_from_tastedive("Tony Bennett"))
extract_movie_titles(get_movies_from_tastedive("Black Panther"))

def get_related_titles(list):
    five=[]
    for movie in list:
        five=five+extract_movie_titles(get_movies_from_tastedive(movie))
    unique=[]
    for movie in five:
        if movie not in unique:
            unique.append(movie)
    return unique

get_related_titles(["Black Panther", "Captain Marvel"])
get_related_titles([])


import requests_with_caching
import json

def get_movie_data(title):
    endpoint = 'http://www.omdbapi.com/'
    param = {}
    param['t'] = title
    param['r'] = 'json'
    cache = requests_with_caching.get(endpoint, params=param)

    return json.loads(cache.text)

def get_movie_rating(dict):
    score = 0
    for item in dict["Ratings"]:
        
        if item["Source"] == "Rotten Tomatoes":
            score = int(item["Value"][:-1])
    return score

get_movie_rating(get_movie_data("Deadpool 2"))


import requests_with_caching
import json
# might run into the situation that it tells you timelimit error, so type code below for 999s
import sys
sys.setExecutionLimit(999000)

def get_movies_from_tastedive(title):
    endpoint = 'https://tastedive.com/api/similar'
    param = {}
    param['q'] = title
    param['limit'] = 5
    param['type'] = 'movies'

    cache = requests_with_caching.get(endpoint, params=param)
    return json.loads(cache.text)

get_movies_from_tastedive("Bridesmaids")
get_movies_from_tastedive("Black Panther")


def extract_movie_titles(dict):
    list=[]
    for elem in dict["Similar"]["Results"]:
        list.append(elem["Name"])
    return list

extract_movie_titles(get_movies_from_tastedive("Tony Bennett"))
extract_movie_titles(get_movies_from_tastedive("Black Panther"))

def get_related_titles(list):
    five=[]
    for movie in list:
        five=five+extract_movie_titles(get_movies_from_tastedive(movie))
    unique=[]
    for movie in five:
        if movie not in unique:
            unique.append(movie)
    print(unique)
    return unique

get_related_titles(["Black Panther", "Captain Marvel"])
get_related_titles([])

def get_movie_data(title):
    endpoint = 'http://www.omdbapi.com/'
    param = {}
    param['t'] = title
    param['r'] = 'json'
    
    cache = requests_with_caching.get(endpoint, params=param)

    return json.loads(cache.text)

def get_movie_rating(dict):
    score = 0
    for item in dict["Ratings"]:
        
        if item["Source"] == "Rotten Tomatoes":
            score = int(item["Value"][:-1])
            print(score)
    return score
    
get_movie_rating(get_movie_data("Deadpool 2"))

def get_sorted_recommendations(list):
    new_list = get_related_titles(list)
    new_dict = {}
    for i in new_list:
        rating = get_movie_rating(get_movie_data(i))
        new_dict[i] = rating
    print(new_dict)
    print(sorted(new_dict,reverse=True))
    return [i[0] for i in sorted(new_dict.items(), key=lambda item: (item[1], item[0]), reverse=True)]

get_sorted_recommendations(["Bridesmaids", "Sherlock Holmes"])
