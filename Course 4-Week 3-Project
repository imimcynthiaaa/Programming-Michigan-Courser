VOWEL_COST = 250
LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
VOWELS = 'AEIOU'

# Write the WOFPlayer class definition (part A) here
class WOFPlayer():
    def __init__(self, initName):
        self.name = initName
        self.prizeMoney = 0
        self.prizes = []
    def goBankrupt(self):
        self.prizeMoney = 0
    def addPrize(self, prize):
        self.prizes.append(prize)
    def addMoney(self,amt):
        self.prizeMoney = self.prizeMoney + amt
    def __str__(self):
        state = self.name + " ($" + str(self.prizeMoney) + ")"
        return state
     
# Write the WOFHumanPlayer class definition (part B) here
class WOFHumanPlayer(WOFPlayer):
    def getMove(category, obscuredPhrase, guessed):
        str = input(self.name + "has $"+ str(self.prizeMoney)+ "/n" + ", Category:" + category + "/n" + ", Phrases:" + "/n" + obscuredPhrase + "/n" + ", Guessed:" + guessed + "/n" + "Guess a letter, phrase, or type 'exit' or 'pass':") 
        print(str) 
        
# Write the WOFComputerPlayer class definition (part C) here
def all_vowels(lst):
    for letter in lst:
        if letter not in VOWELS:
            return False
        else:
            continue
    return True

class WOFComputerPlayer(WOFPlayer):
    SORTED_FREQUENCIES = 'ZQXJKVBPYGFWMUCLDRHSNIOATE'
    prizemoney = 0
    def __init__(self, name, difficulty):
        self.name = name
        self.difficulty = difficulty
        self.prizeMoney = 0
        self.prizes = []
    
    def smartCoinFlip(self):
        if random.randint(1, 10) > self.difficulty:
            return True
        else: 
            return False
    
    def getPossibleLetters(self,guessed):        
        available_letters = []
        for letter in LETTERS:
            if letter in guessed:
                continue
            elif letter not in guessed:
                if (letter in VOWELS) and (self.prizeMoney > VOWEL_COST):
                    available_letters.append(letter)
                elif letter not in VOWELS:
                    available_letters.append(letter)
        return available_letters
   
    def getMove(self,category, obscuredPhrase, guessed):
        available_letters = self.getPossibleLetters(guessed)
        if len(available_letters) == 0:
            return 'pass'
        elif (all_vowels(available_letters)==True) and (self.prizeMoney < VOWEL_COST):
            return 'pass'
        else:
            if self.smartCoinFlip() == True:
                for i in range(len(self.SORTED_FREQUENCIES)):
                    letter = self.SORTED_FREQUENCIES[i]                
                   
                    if letter in available_letters:
                        return letter
            else:
                return random.choice(available_letters)
